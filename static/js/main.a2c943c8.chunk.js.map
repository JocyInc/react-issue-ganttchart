{"version":3,"sources":["components/Gantt/Gantt.js","components/Gantt/index.js","components/Toolbar/Toolbar.js","components/Toolbar/index.js","App.js","serviceWorker.js","index.js"],"names":["Gantt","props","dataProcessor","getGitHubIssues","a","url","axios","get","then","res","data","map","info","number","start_date_str","duration","start_date","getStartDateFromBodyString","body","due_date","getDueDateFromBodyString","unscheduled","start_date_moment","moment","due_date_moment","toLocaleDateString","diff","Date","created_at","issue","id","text","title","progress","push","links","gantt","parse","initZoom","ext","zoom","init","levels","name","scale_height","min_column_width","scales","unit","step","format","value","setLevel","onDataUpdated","this","createDataProcessor","type","action","item","Promise","resolve","reject","date_str","match","write_start_date","replace","write_due_date","due_date_str","add","toDate","replaceDueDateInBodyString","replaceStartDateInBodyString","post","headers","token","console","log","catch","err","alert","show","e","window","open","nextProps","config","xml_date","order_branch","order_branch_free","show_unscheduled","locale","labels","section_description","sort","attachEvent","linkIssue","updateIssue","ganttContainer","initGanttDataProcessor","destructor","setZoom","ref","input","style","width","height","Component","Toolbar","handleZoomChange","onZoomChange","target","handleTokenChange","onTokenChange","handleGitURLChange","onGitURLChange","zoomRadios","isActive","key","className","checked","onChange","App","state","currentZoom","messages","git_url","setState","bake_cookie","read_cookie","logDataUpdate","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2c943c8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { gantt } from 'dhtmlx-gantt';\nimport axios from 'axios';\nimport 'dhtmlx-gantt/codebase/dhtmlxgantt.css';\nimport moment from 'moment'\n\nexport default class Gantt extends Component {\n\n  constructor(props) {\n    super(props);\n    this.initZoom();\n  }\n\n  // instance of gantt.dataProcessor\n  dataProcessor = null;\n\n  initZoom() {\n    gantt.ext.zoom.init({\n      levels: [\n        {\n          name: 'Days',\n          scale_height: 60,\n          min_column_width: 70,\n          scales: [\n            { unit: 'week', step: 1, format: 'Week #%W' },\n            { unit: 'day', step: 1, format: '%d %M' }\n          ]\n        },\n        {\n          name: 'Months',\n          scale_height: 60,\n          min_column_width: 70,\n          scales: [\n            { unit: \"month\", step: 1, format: '%F' },\n            { unit: 'week', step: 1, format: '#%W' }\n          ]\n        }\n      ]\n    });\n  }\n\n  setZoom(value) {\n    gantt.ext.zoom.setLevel(value);\n  }\n\n  initGanttDataProcessor() {\n    /**\n     * type: \"task\"|\"link\"\n     * action: \"create\"|\"update\"|\"delete\"\n     * item: data object object\n     */\n    const onDataUpdated = this.props.onDataUpdated;\n    this.dataProcessor = gantt.createDataProcessor((type, action, item, id) => {\n      return new Promise((resolve, reject) => {\n        if (onDataUpdated) {\n          onDataUpdated(type, action, item, id);\n        }\n\n        // if onDataUpdated changes returns a permanent id of the created item, you can return it from here so dhtmlxGantt could apply it\n        // resolve({id: databaseId});\n        return resolve();\n      });\n    });\n  }\n\n  getStartDateFromBodyString(body) {\n    let date_str = body.match(/start_date: \\d{4}\\/\\d{1,2}\\/\\d{1,2}/);\n    if (date_str == null) {\n      return null;\n    }\n    date_str = date_str[0].match(/\\d{4}\\/\\d{1,2}\\/\\d{1,2}/)[0];\n    return new Date(date_str);\n  }\n\n  getDueDateFromBodyString(body) {\n    let date_str = body.match(/due_date: \\d{4}\\/\\d{1,2}\\/\\d{1,2}/);\n    if (date_str == null) {\n      return null;\n    }\n    date_str = date_str[0].match(/\\d{4}\\/\\d{1,2}\\/\\d{1,2}/)[0];\n    return new Date(date_str);\n  }\n\n  getGitHubIssues = async () => {\n    const url = 'https://api.github.com/repos/lamact/react-issue-ganttchart/issues';\n    axios.get(url).then((res) => {\n      res.data.map((info) => {\n        axios.get(url + '/' + info.number).then((res) => {\n          let start_date = this.getStartDateFromBodyString(res.data.body);\n          let due_date = this.getDueDateFromBodyString(res.data.body);\n          let start_date_str, duration, unscheduled = null;\n          if (start_date != null && due_date != null) {\n            let start_date_moment = moment(start_date);\n            let due_date_moment = moment(due_date);\n            start_date_str = start_date.toLocaleDateString(\"ja-JP\");\n            duration = due_date_moment.diff(start_date_moment, 'days');\n            unscheduled = false\n          } else {\n            start_date_str = new Date(info.created_at).toLocaleDateString(\"ja-JP\");\n            duration = 1;\n            unscheduled = true\n          }\n          let issue = {\n            id: info.number,\n            text: info.title,\n            start_date: start_date_str,\n            duration: duration,\n            progress: 0.1,\n            unscheduled: unscheduled,\n          }\n          let data = [];\n          let links = [];\n          data.push(issue);\n          data = { data: data, links: links }\n          gantt.parse(data);\n        });\n        return null;\n      });\n    });\n  };\n\n  replaceStartDateInBodyString(body, write_start_date) {\n    let start_date = this.getStartDateFromBodyString(body);\n    if (start_date != null) {\n      return body.replace(/start_date: \\d{4}\\/\\d{1,2}\\/\\d{1,2}/, \"start_date: \" + write_start_date);\n    } else {\n      return \"start_date: \" + write_start_date + \"\\n\" + body;\n    }\n  }\n\n  replaceDueDateInBodyString(body, write_due_date) {\n    let due_date = this.getDueDateFromBodyString(body);\n    if (due_date != null) {\n      return body.replace(/due_date: \\d{4}\\/\\d{1,2}\\/\\d{1,2}/, \"due_date: \" + write_due_date);\n    } else {\n      return \"due_date: \" + write_due_date + \"\\n\" + body;\n    }\n  }\n\n  updateIssue(id, item) {\n    const url = 'https://api.github.com/repos/lamact/react-issue-ganttchart/issues/' + item.id;\n    let start_date = new Date(item.start_date);\n    let start_date_str = start_date.toLocaleDateString(\"ja-JP\");\n    let due_date = moment(start_date).add(item.duration, 'd').toDate();\n    let due_date_str = due_date.toLocaleDateString(\"ja-JP\");\n\n    axios.get(url).then((res) => {\n      let body = res.data.body;\n      body = this.replaceDueDateInBodyString(body, due_date_str);\n      body = this.replaceStartDateInBodyString(body, start_date_str);\n\n      axios.post(url, {\n        body: body,\n      }, {\n        headers: {\n          'Authorization': `token ${this.props.token}`\n        }\n      }).then((res) => {\n        console.log(\"success post\")\n      }).catch((err) => {\n        alert.show('aa')\n        this.getGitHubIssues();\n      });\n    });\n    return null;\n  }\n\n  \n  linkIssue(id, e) {\n    console.log(id)\n    window.open(\"https://google.com\", \"_blank\");\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return this.props.zoom !== nextProps.zoom;\n  }\n\n  componentDidMount() {\n    gantt.config.xml_date = \"%Y/%m/%d %H:%i\";\n    gantt.config.order_branch = true;\n    gantt.config.order_branch_free = true;\n\n    gantt.config.show_unscheduled = true;\n    gantt.locale.labels.section_description = \"Issue Description\";\n    gantt.config.sort = true;\n    gantt.attachEvent(\"onTaskClick\",  (id, e) => {\n      this.linkIssue(id, e);\n    });\n\n    gantt.attachEvent(\"onAfterTaskUpdate\", (id, item) => {\n      this.updateIssue(id, item);\n    });\n    gantt.init(this.ganttContainer);\n    this.initGanttDataProcessor();\n    this.getGitHubIssues();\n  }\n\n  componentWillUnmount() {\n    if (this.dataProcessor) {\n      this.dataProcessor.destructor();\n      this.dataProcessor = null;\n    }\n  }\n\n  render() {\n    const { zoom } = this.props;\n    this.setZoom(zoom);\n    return (\n      <div\n        ref={(input) => { this.ganttContainer = input }}\n        style={{ width: '100%', height: '100%' }}\n      ></div>\n    );\n  }\n}\n","import Gantt from './Gantt';\nimport './Gantt.css';\nexport default Gantt;","import React, { Component } from 'react';\nexport default class Toolbar extends Component {\n  handleZoomChange = (e) => {\n    if (this.props.onZoomChange) {\n      this.props.onZoomChange(e.target.value)\n    }\n  }\n\n  handleTokenChange = (e) => {\n    if (this.props.onTokenChange) {\n      this.props.onTokenChange(e.target.value)\n    }\n  }\n\n  handleGitURLChange = (e) => {\n    if (this.props.onGitURLChange) {\n      this.props.onGitURLChange(e.target.value)\n    }\n  }\n\n  render() {\n    const zoomRadios = ['Days', 'Months'].map((value) => {\n      const isActive = this.props.zoom === value;\n      return (\n        <label key={value} className={`radio-label ${isActive ? 'radio-label-active' : ''}`}>\n          <input type='radio'\n            checked={isActive}\n            onChange={this.handleZoomChange}\n            value={value} />\n          {value}\n        </label>\n      );\n    });\n\n    return (\n      <div className=\"tool-bar\">\n        <b>URL: </b>\n        <input type=\"text\"\n          value={this.props.url}\n          onChange={this.handleGitURLChange}\n          className='text-input-label' />\n        <b>Token: </b>\n        <input type=\"password\"\n          value={this.props.token}\n          onChange={this.handleTokenChange}\n          className='text-input-label' />\n        <b>Zoom: </b>\n        {zoomRadios}\n      </div>\n    );\n  }\n}\n","import Toolbar from './Toolbar';\nimport './Toolbar.css';\nexport default Toolbar;","import React, { Component } from 'react';\nimport Gantt from './components/Gantt';\nimport Toolbar from './components/Toolbar';\nimport { bake_cookie, read_cookie } from 'sfcookies';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    currentZoom: 'Months',\n    messages: [],\n    git_url: '',\n    token: '',\n  };\n\n  handleZoomChange = (zoom) => {\n    this.setState({\n      currentZoom: zoom\n    });\n  }\n\n  handleTokenChange = (token) => {\n    this.setState({ token });\n    bake_cookie('personal_access_token', token);\n  }\n\n  handleGitURLChange = (git_url) => {\n    this.setState({ git_url });\n    bake_cookie('git_url', git_url);\n  }\n\n  componentDidMount() {\n    this.setState({\n      token: read_cookie('personal_access_token')\n    });\n  }\n\n  render() {\n    const { currentZoom, git_url, token } = this.state;\n    return (\n      <div>\n        <div className=\"zoom-bar\">\n          <Toolbar\n            zoom={currentZoom}\n            onZoomChange={this.handleZoomChange}\n            git_url={git_url}\n            onGitURLChange={this.handleGitURLChange}\n            token={token}\n            onTokenChange={this.handleTokenChange}\n          />\n        </div>\n        <div className=\"gantt-container\">\n          <Gantt\n            zoom={currentZoom}\n            git_url={git_url}\n            token={token}\n            onDataUpdated={this.logDataUpdate}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}